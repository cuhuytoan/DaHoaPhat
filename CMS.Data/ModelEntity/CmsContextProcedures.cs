// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using CMS.Data.ModelEntity;

namespace CMS.Data.ModelEntity
{
    public partial class CmsContext
    {
        private CmsContextProcedures _procedures;

        public CmsContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new CmsContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public CmsContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class CmsContextProcedures
    {
        private readonly CmsContext _context;

        public CmsContextProcedures(CmsContext context)
        {
            _context = context;
        }

        public virtual async Task<List<SpAccountSearchResult>> SpAccountSearchAsync(string Keyword, Guid? RoleId, bool? Active, int? PageSize, int? CurrentPage, OutputParameter<int?> ItemCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterItemCount = new SqlParameter
            {
                ParameterName = "ItemCount",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Keyword",
                    Size = 4000,
                    Value = Keyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentPage",
                    Value = CurrentPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterItemCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpAccountSearchResult>("EXEC @returnValue = [dbo].[SpAccountSearch] @Keyword, @RoleId, @Active, @PageSize, @CurrentPage, @ItemCount OUTPUT", sqlParameters, cancellationToken);

            ItemCount.SetValue(parameterItemCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpArticleBreadcrumbResult>> SpArticleBreadcrumbAsync(int? ArticleCategoryId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ArticleCategoryId",
                    Value = ArticleCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpArticleBreadcrumbResult>("EXEC @returnValue = [dbo].[SpArticleBreadcrumb] @ArticleCategoryId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpArticleCommentSearchResult>> SpArticleCommentSearchAsync(string Keyword, int? ArticleId, bool? Active, string CreateBy, int? PageSize, int? CurrentPage, OutputParameter<int?> ItemCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterItemCount = new SqlParameter
            {
                ParameterName = "ItemCount",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Keyword",
                    Size = 4000,
                    Value = Keyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ArticleId",
                    Value = ArticleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreateBy",
                    Size = 200,
                    Value = CreateBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentPage",
                    Value = CurrentPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterItemCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpArticleCommentSearchResult>("EXEC @returnValue = [dbo].[SpArticleCommentSearch] @Keyword, @ArticleId, @Active, @CreateBy, @PageSize, @CurrentPage, @ItemCount OUTPUT", sqlParameters, cancellationToken);

            ItemCount.SetValue(parameterItemCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpArticleCommentStaffSearchResult>> SpArticleCommentStaffSearchAsync(string Keyword, int? ArticleId, bool? Active, string CreateBy, int? PageSize, int? CurrentPage, OutputParameter<int?> ItemCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterItemCount = new SqlParameter
            {
                ParameterName = "ItemCount",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Keyword",
                    Size = 4000,
                    Value = Keyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ArticleId",
                    Value = ArticleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreateBy",
                    Size = 200,
                    Value = CreateBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentPage",
                    Value = CurrentPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterItemCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpArticleCommentStaffSearchResult>("EXEC @returnValue = [dbo].[SpArticleCommentStaffSearch] @Keyword, @ArticleId, @Active, @CreateBy, @PageSize, @CurrentPage, @ItemCount OUTPUT", sqlParameters, cancellationToken);

            ItemCount.SetValue(parameterItemCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpArticleGetByBlockIdResult>> SpArticleGetByBlockIdAsync(int? ArticleBlockId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ArticleBlockId",
                    Value = ArticleBlockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpArticleGetByBlockIdResult>("EXEC @returnValue = [dbo].[SpArticleGetByBlockId] @ArticleBlockId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpArticleGetByCategoryIdResult>> SpArticleGetByCategoryIdAsync(int? ArticleCategoryId, int? PageSize, int? CurrentPage, OutputParameter<int?> ItemCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterItemCount = new SqlParameter
            {
                ParameterName = "ItemCount",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ArticleCategoryId",
                    Value = ArticleCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentPage",
                    Value = CurrentPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterItemCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpArticleGetByCategoryIdResult>("EXEC @returnValue = [dbo].[SpArticleGetByCategoryId] @ArticleCategoryId, @PageSize, @CurrentPage, @ItemCount OUTPUT", sqlParameters, cancellationToken);

            ItemCount.SetValue(parameterItemCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpArticleGetNewByCategoryIdResult>> SpArticleGetNewByCategoryIdAsync(int? ArticleCategoryId, int? Number, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ArticleCategoryId",
                    Value = ArticleCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Number",
                    Value = Number ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpArticleGetNewByCategoryIdResult>("EXEC @returnValue = [dbo].[SpArticleGetNewByCategoryId] @ArticleCategoryId, @Number", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpArticleGetTopByCategoryIdResult>> SpArticleGetTopByCategoryIdAsync(int? ArticleCategoryId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ArticleCategoryId",
                    Value = ArticleCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpArticleGetTopByCategoryIdResult>("EXEC @returnValue = [dbo].[SpArticleGetTopByCategoryId] @ArticleCategoryId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpArticleSearchResult>> SpArticleSearchAsync(string Keyword, int? ArticleCategoryId, int? ArticleStatusId, int? ProductBrandId, int? ArticleTypeId, int? ExceptionId, bool? ExceptionArticleTop, DateTime? FromDate, DateTime? ToDate, bool? Efficiency, bool? Active, string AssignBy, string CreateBy, int? PageSize, int? CurrentPage, OutputParameter<int?> ItemCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterItemCount = new SqlParameter
            {
                ParameterName = "ItemCount",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Keyword",
                    Size = 4000,
                    Value = Keyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ArticleCategoryId",
                    Value = ArticleCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ArticleStatusId",
                    Value = ArticleStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductBrandId",
                    Value = ProductBrandId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ArticleTypeId",
                    Value = ArticleTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ExceptionId",
                    Value = ExceptionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ExceptionArticleTop",
                    Value = ExceptionArticleTop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Efficiency",
                    Value = Efficiency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "AssignBy",
                    Size = 900,
                    Value = AssignBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateBy",
                    Size = 900,
                    Value = CreateBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentPage",
                    Value = CurrentPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterItemCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpArticleSearchResult>("EXEC @returnValue = [dbo].[SpArticleSearch] @Keyword, @ArticleCategoryId, @ArticleStatusId, @ProductBrandId, @ArticleTypeId, @ExceptionId, @ExceptionArticleTop, @FromDate, @ToDate, @Efficiency, @Active, @AssignBy, @CreateBy, @PageSize, @CurrentPage, @ItemCount OUTPUT", sqlParameters, cancellationToken);

            ItemCount.SetValue(parameterItemCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpProductBrandSearchResult>> SpProductBrandSearchAsync(string Keyword, int? ProductBrandCategoryId, int? ProductBrandStatusId, int? ProductBrandTypeId, int? DepartmentManId, int? CountryId, int? LocationId, int? DistrictId, int? WardId, int? ExceptionId, DateTime? FromDate, DateTime? ToDate, bool? Efficiency, bool? Active, string CreateBy, int? PageSize, int? CurrentPage, OutputParameter<int?> ItemCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterItemCount = new SqlParameter
            {
                ParameterName = "ItemCount",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Keyword",
                    Size = 4000,
                    Value = Keyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProductBrandCategoryId",
                    Value = ProductBrandCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductBrandStatusId",
                    Value = ProductBrandStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductBrandTypeId",
                    Value = ProductBrandTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentManId",
                    Value = DepartmentManId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CountryId",
                    Value = CountryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DistrictId",
                    Value = DistrictId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WardId",
                    Value = WardId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ExceptionId",
                    Value = ExceptionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Efficiency",
                    Value = Efficiency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreateBy",
                    Size = 900,
                    Value = CreateBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentPage",
                    Value = CurrentPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterItemCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpProductBrandSearchResult>("EXEC @returnValue = [dbo].[SpProductBrandSearch] @Keyword, @ProductBrandCategoryId, @ProductBrandStatusId, @ProductBrandTypeId, @DepartmentManId, @CountryId, @LocationId, @DistrictId, @WardId, @ExceptionId, @FromDate, @ToDate, @Efficiency, @Active, @CreateBy, @PageSize, @CurrentPage, @ItemCount OUTPUT", sqlParameters, cancellationToken);

            ItemCount.SetValue(parameterItemCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpProductBreadcrumbResult>> SpProductBreadcrumbAsync(int? ProductCategoryId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProductCategoryId",
                    Value = ProductCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpProductBreadcrumbResult>("EXEC @returnValue = [dbo].[SpProductBreadcrumb] @ProductCategoryId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpProductCommentSearchResult>> SpProductCommentSearchAsync(string Keyword, int? ProductId, bool? Active, string CreateBy, int? PageSize, int? CurrentPage, OutputParameter<int?> ItemCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterItemCount = new SqlParameter
            {
                ParameterName = "ItemCount",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Keyword",
                    Size = 4000,
                    Value = Keyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProductId",
                    Value = ProductId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreateBy",
                    Size = 200,
                    Value = CreateBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentPage",
                    Value = CurrentPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterItemCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpProductCommentSearchResult>("EXEC @returnValue = [dbo].[SpProductCommentSearch] @Keyword, @ProductId, @Active, @CreateBy, @PageSize, @CurrentPage, @ItemCount OUTPUT", sqlParameters, cancellationToken);

            ItemCount.SetValue(parameterItemCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpProductCommentStaffSearchResult>> SpProductCommentStaffSearchAsync(string Keyword, int? ProductId, bool? Active, string CreateBy, int? PageSize, int? CurrentPage, OutputParameter<int?> ItemCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterItemCount = new SqlParameter
            {
                ParameterName = "ItemCount",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Keyword",
                    Size = 4000,
                    Value = Keyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProductId",
                    Value = ProductId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreateBy",
                    Size = 200,
                    Value = CreateBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentPage",
                    Value = CurrentPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterItemCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpProductCommentStaffSearchResult>("EXEC @returnValue = [dbo].[SpProductCommentStaffSearch] @Keyword, @ProductId, @Active, @CreateBy, @PageSize, @CurrentPage, @ItemCount OUTPUT", sqlParameters, cancellationToken);

            ItemCount.SetValue(parameterItemCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpProductSearchResult>> SpProductSearchAsync(string Keyword, int? ProductCategoryId, int? ProductManufactureId, int? ProductStatusId, int? CountryId, int? LocationId, int? DepartmentManId, int? ProductBrandId, int? ProductTypeId, int? ExceptionId, bool? ExceptionProductTop, decimal? FromPrice, decimal? ToPrice, DateTime? FromDate, DateTime? ToDate, bool? Efficiency, bool? Active, string AssignBy, string CreateBy, string OrderBy, int? PageSize, int? CurrentPage, OutputParameter<int?> ItemCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterItemCount = new SqlParameter
            {
                ParameterName = "ItemCount",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Keyword",
                    Size = 4000,
                    Value = Keyword ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProductCategoryId",
                    Value = ProductCategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductManufactureId",
                    Value = ProductManufactureId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductStatusId",
                    Value = ProductStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CountryId",
                    Value = CountryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LocationId",
                    Value = LocationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentManId",
                    Value = DepartmentManId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductBrandId",
                    Value = ProductBrandId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductTypeId",
                    Value = ProductTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ExceptionId",
                    Value = ExceptionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ExceptionProductTop",
                    Value = ExceptionProductTop ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FromPrice",
                    Value = FromPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ToPrice",
                    Value = ToPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Efficiency",
                    Value = Efficiency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Active",
                    Value = Active ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "AssignBy",
                    Size = 900,
                    Value = AssignBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateBy",
                    Size = 900,
                    Value = CreateBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 200,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentPage",
                    Value = CurrentPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterItemCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpProductSearchResult>("EXEC @returnValue = [dbo].[SpProductSearch] @Keyword, @ProductCategoryId, @ProductManufactureId, @ProductStatusId, @CountryId, @LocationId, @DepartmentManId, @ProductBrandId, @ProductTypeId, @ExceptionId, @ExceptionProductTop, @FromPrice, @ToPrice, @FromDate, @ToDate, @Efficiency, @Active, @AssignBy, @CreateBy, @OrderBy, @PageSize, @CurrentPage, @ItemCount OUTPUT", sqlParameters, cancellationToken);

            ItemCount.SetValue(parameterItemCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpUserNotifySearchResult>> SpUserNotifySearchAsync(int? UserNotifyTypeId, Guid? AspNetUsersId, bool? Readed, int? PageSize, int? CurrentPage, OutputParameter<int?> ItemCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterItemCount = new SqlParameter
            {
                ParameterName = "ItemCount",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserNotifyTypeId",
                    Value = UserNotifyTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AspNetUsersId",
                    Value = AspNetUsersId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "Readed",
                    Value = Readed ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentPage",
                    Value = CurrentPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterItemCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpUserNotifySearchResult>("EXEC @returnValue = [dbo].[SpUserNotifySearch] @UserNotifyTypeId, @AspNetUsersId, @Readed, @PageSize, @CurrentPage, @ItemCount OUTPUT", sqlParameters, cancellationToken);

            ItemCount.SetValue(parameterItemCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
